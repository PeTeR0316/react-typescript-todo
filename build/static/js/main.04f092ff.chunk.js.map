{"version":3,"sources":["modules/todos.ts","hooks/useDeleteTodo.ts","components/TodoItem.tsx","components/TodoList.tsx","hooks/useTodos.ts","hooks/useAddTodo.ts","components/TodoInsert.tsx","App.tsx","reportWebVitals.ts","modules/index.ts","index.tsx"],"names":["ADD_TODO","DELETE_TODO","initialState","index","title","useDeleteTodo","dispatch","useDispatch","useCallback","type","payload","deleteTodo","TodoItem","todo","className","onClick","TodoList","todoList","useSelector","state","todos","length","map","useAddTodo","addTodo","TodoInsert","useState","value","setValue","onSubmit","e","preventDefault","onChange","target","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","nextIndex","Math","max","concat","filter","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mKAAMA,EAAW,gBACXC,EAAc,kBAwBdC,EAA0B,CAC5B,CACIC,MAAO,EACPC,MAAQ,yCAEZ,CACID,MAAO,EACPC,MAAQ,0CC3BD,SAASC,IACpB,IAAMC,EAAWC,cAEjB,OAAOC,uBAAY,SAAAL,GAAK,OAAIG,EDAL,SAACH,GAAD,MAAoB,CAC3CM,KAAMR,EACNS,QAASP,GCF4BQ,CAAWR,MAAS,CAACG,I,WCc/CM,EAdE,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,KACTF,EAAaN,IAEnB,OACI,qBAAKS,UAAU,WAAf,SACI,+BACI,+BAAOD,EAAKV,QACZ,+BAAOU,EAAKT,QACZ,sBAAMW,QAAS,kBAAMJ,EAAWE,EAAKV,QAArC,gCCXhB,IAgBea,EAhBE,WACb,IAAMC,ECFQC,aAAY,SAACC,GAAD,OAAuBA,EAAMC,SDIvD,OAAuB,IAApBH,EAASI,OACD,sGAIP,6BACKJ,EAASK,KAAI,SAAAT,GAAI,OACd,cAAC,EAAD,CAAUA,KAAMA,GAAWA,EAAKV,a,QEVjC,SAASoB,IACpB,IAAMjB,EAAWC,cAEjB,OAAOC,uBAAY,SAAAJ,GAAK,OAAIE,ELLT,SAACF,GAAD,MAAoB,CACvCK,KAAMT,EACNU,QAASN,GKG4BoB,CAAQpB,MAAS,CAACE,ICJ3D,IA6BemB,EA7BI,WACf,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACMJ,EAAUD,IAYhB,OACI,qBAAKT,UAAU,aAAf,SACI,uBAAMe,SARG,SAACC,GACdA,EAAEC,iBACFP,EAAQG,GACRC,EAAS,KAKL,UACI,uBACInB,KAAK,OACLkB,MAASA,EACTK,SAhBC,SAACF,GACdF,EAASE,EAAEG,OAAON,UAkBV,wBAAQlB,KAAK,SAAb,gCCdDyB,MATf,WACE,OACE,sBAAKpB,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCMSqB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCNRQ,EAAcC,YAAgB,CAChCzB,MTgCW,WAAqE,IAAtDD,EAAqD,uDAAlCjB,EAAc4C,EAAoB,uCAC/E,OAAOA,EAAOrC,MACV,KAAKT,EACD,IAAM+C,EAAYC,KAAKC,IAAL,MAAAD,KAAI,YAAQ7B,EAAMG,KAAI,SAAAT,GAAI,OAAIA,EAAKV,WAAU,EAC/D,OAAOgB,EAAM+B,OAAO,CAChB/C,MAAO4C,EACP3C,MAAO0C,EAAOpC,UAEtB,KAAKT,EACD,OAAOkB,EAAMgC,QAAO,SAAAtC,GAAI,OAAIA,EAAKV,QAAU2C,EAAOpC,WACtD,QACI,OAAOS,MSxCJyB,ICCTQ,EAAQC,YAAYT,GAE1BU,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJK,SAASC,eAAe,SAM1BvB,M","file":"static/js/main.04f092ff.chunk.js","sourcesContent":["const ADD_TODO = 'todo/ADD_TODO' as const;\r\nconst DELETE_TODO = 'toso/DELETETODO' as const;\r\n\r\nexport const addTodo = (title: string) => ({\r\n    type: ADD_TODO,\r\n    payload: title,\r\n});\r\n\r\nexport const deleteTodo  = (index: number) => ({\r\n    type: DELETE_TODO,\r\n    payload: index,\r\n});\r\n\r\n\r\ntype TodoAction = \r\n    | ReturnType<typeof addTodo>\r\n    | ReturnType<typeof deleteTodo>;\r\n\r\nexport type Todo = {\r\n    index: number;\r\n    title: string;\r\n};\r\n\r\ntype TodoState = Todo[];\r\n\r\nconst initialState: TodoState = [\r\n    {\r\n        index: 0,\r\n        title : \"첫번째 리스트\"\r\n    },\r\n    {\r\n        index: 1,\r\n        title : \"두번째 리스트\"\r\n    },\r\n];\r\n\r\nexport default function todos(state: TodoState = initialState, action: TodoAction) {\r\n    switch(action.type) {\r\n        case ADD_TODO :\r\n            const nextIndex = Math.max(...state.map(todo => todo.index)) + 1;\r\n            return state.concat({\r\n                index: nextIndex,\r\n                title: action.payload\r\n            });\r\n        case DELETE_TODO :\r\n            return state.filter(todo => todo.index !== action.payload); // 삭제 요청한 index 번호를 걸러내는 작업\r\n        default :\r\n            return state;\r\n    }\r\n}\r\n\r\n","import { useDispatch } from 'react-redux';\r\nimport { useCallback  } from 'react';\r\nimport { deleteTodo } from '../modules/todos'\r\n\r\n\r\nexport default function useDeleteTodo() {\r\n    const dispatch = useDispatch();\r\n\r\n    return useCallback(index => dispatch(deleteTodo(index)), [dispatch]);\r\n}","import React from 'react';\r\nimport { Todo } from '../modules/todos';\r\nimport useDeleteTodo from '../hooks/useDeleteTodo';\r\n\r\ntype TodoItemProps = {\r\n    todo: Todo\r\n}\r\n\r\nconst TodoItem = ({todo}: TodoItemProps) => {\r\n    const deleteTodo = useDeleteTodo();\r\n\r\n    return (\r\n        <div className=\"todoItem\">\r\n            <li>\r\n                <span>{todo.index}</span>\r\n                <span>{todo.title}</span>\r\n                <span onClick={() => deleteTodo(todo.index)}>삭제</span>\r\n            </li>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoItem;","import React from 'react';\r\nimport { Todo } from '../modules/todos';\r\nimport TodoItem from './TodoItem';\r\nimport useTodos from '../hooks/useTodos'\r\n\r\nconst TodoList = () => {\r\n    const todoList: Todo[] = useTodos();\r\n\r\n    if(todoList.length === 0) {\r\n        return <p>등록된 리스트가 없습니다.</p>;\r\n    }\r\n\r\n    return (\r\n        <ul>\r\n            {todoList.map(todo => (\r\n                <TodoItem todo={todo} key={todo.index} />\r\n            ))}\r\n        </ul>\r\n    )\r\n};\r\n\r\nexport default TodoList;","import { useSelector } from \"react-redux\";\r\nimport { RootState } from '../modules';\r\n\r\nexport default function useTodos() {\r\n    const todos = useSelector((state: RootState) => (state.todos));\r\n    return todos;\r\n}","import { useDispatch } from 'react-redux';\r\nimport { useCallback  } from 'react';\r\nimport { addTodo } from '../modules/todos'\r\n\r\n\r\nexport default function useAddTodo() {\r\n    const dispatch = useDispatch();\r\n\r\n    return useCallback(title => dispatch(addTodo(title)), [dispatch]);\r\n}","import React, { ChangeEvent, FormEvent, useState } from 'react';\r\nimport useAddTodo from '../hooks/useAddTodo';\r\nimport { addTodo } from '../modules/todos';\r\n\r\nconst TodoInsert = () => {\r\n    const [value, setValue] = useState('');\r\n    const addTodo = useAddTodo();\r\n\r\n    const onChange = (e: ChangeEvent<HTMLInputElement>)  => {\r\n        setValue(e.target.value)\r\n    };\r\n\r\n    const onSubmit = (e: FormEvent) => {\r\n        e.preventDefault();\r\n        addTodo(value);\r\n        setValue(''); // 제출 후 input창 초기화\r\n    };\r\n\r\n    return(\r\n        <div className=\"todoInsert\">\r\n            <form onSubmit={onSubmit}>\r\n                <input \r\n                    type=\"text\"\r\n                    value = {value}\r\n                    onChange={onChange}\r\n                />\r\n\r\n                <button type=\"submit\">추가</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoInsert;","import React from 'react';\nimport TodoList from './components/TodoList'\nimport TodoInsert from './components/TodoInsert'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoInsert />\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from \"redux\";\r\nimport todos from './todos';\r\n\r\nconst rootReducer = combineReducers({\r\n    todos,\r\n});\r\n\r\nexport default rootReducer;\r\nexport type RootState = ReturnType<typeof rootReducer>;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport rootReducer from './modules';\n\nconst store = createStore(rootReducer)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}